@use "sass:math";

@function rem($pixel) {
  @if math.is-unitless($pixel) {
    @return math.div($pixel, 16)+rem;
  }

  @else {
    @error 'Não use unidades usando a função rem(), apenas numeros';
  }
}

@function calcWidth($nElements, $gapSize) {
  $percentage: 100% / $nElements;
  $gapTotal: calc($gapSize * ($nElements - 1));

  @return calc($percentage - $gapTotal / $nElements);
}

@mixin disFlex($direction: row, $justify: start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin bg($size: cover, $position: center) {
  background-size: $size;
  background-position: $position;
  background-repeat: no-repeat;
}

// responsive
$grid-breakpoints: (
  xs: 0,
  sm: 320px,
  md: 744px,
  lg: 834px,
  xl: 1200px,
  xxl: 1400px,
);

// Breakpoints down
@mixin small-device-down {
  @media (max-width: #{map-get($grid-breakpoints, 'sm')}) {
    @content;
  }
}

@mixin medium-device-down {
  @media (max-width: #{map-get($grid-breakpoints, 'md')}) {
    @content;
  }
}

@mixin large-device-down {
  @media (max-width: #{map-get($grid-breakpoints, 'lg')}) {
    @content;
  }
}

@mixin x-large-device-down {
  @media (max-width: #{map-get($grid-breakpoints, 'xl')}) {
    @content;
  }
}

@mixin xx-large-device-down {
  @media (max-width: #{map-get($grid-breakpoints, 'xxl')}) {
    @content;
  }
}

// Breakpoints up
@mixin small-device-up {
  @media (min-width: #{map-get($grid-breakpoints, 'sm')}) {
    @content;
  }
}

@mixin medium-device-up {
  @media (min-width: #{map-get($grid-breakpoints, 'md')}) {
    @content;
  }
}

@mixin large-device-up {
  @media (min-width: #{map-get($grid-breakpoints, 'lg')}) {
    @content;
  }
}

@mixin x-large-device-up {
  @media (min-width: #{map-get($grid-breakpoints, 'xl')}) {
    @content;
  }
}

@mixin xx-large-device-up {
  @media (min-width: #{map-get($grid-breakpoints, 'xxl')}) {
    @content;
  }
}